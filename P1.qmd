---
title: "Taller 1"
---

## Introducción

En RStudio podemos tener varias ventanas que nos permiten tener más control de nuestro "ambiente", el historial, los "scripts" o códigos que escribimos y por supuesto, tenemos nuestra consola, que también tiene el símbolo "\>" con R. Podemos pedir operaciones básicas

```{r 2}
2+5
5*3

#Para escribir comentarios y que no los lea como operaciones ponemos el símbolo de gato
# Lo podemos hacer para un comentario en una línea o la par de una instrucción
1:5               # Secuencia 1-5

seq(1, 10, 0.5)   # Secuencia con incrementos diferentes a 1

c('a','b','c')  # Vector con caracteres
1:7             # Entero
40<80           # Valor logico
2+2 == 5        # Valor logico
T == TRUE       # T expresion corta de verdadero

```

R es un lenguaje de programación por objetos. Por lo cual vamos a tener objetos a los que se les asigna su contenido. Si usamos una flechita "\<-" o "-\>" le estamos asignando algo al objeto que apunta la felcha.

```{r}
x <- 24         # Asignacion de valor 24 a la variable x para su uso posterior (OBJETO)
x/2             # Uso posterior de variable u objeto x
x               # Imprime en pantalla el valor de la variable u objeto
x <- TRUE       # Asigna el valor logico TRUE a la variable x OJO: x toma el ultimo valor que se le asigna
x
```

## Importando la base

```{r}

load("datos/endireh2021_pegadaCDMX.RData")

```

Vamos a revisarla...

```{r}

names(endireh2021_CDMX) # nos da los nombres
```

```{r}
head(endireh2021_CDMX) # 6 lineas
```


## Paquetes

Los paquetes los podemos instalar ya sea en el menú de paquetes en la ventana del lado derecho inferior (si tienes la configuración original) o podemos hacerlo por comandos. 

![Paso1](ima/paquete1.png)

![Paso2](ima/paquete2.png)

![Paso3](ima/paquete3.png)

Y se verá algo así en la consola

![Paso4](ima/paquete4.png)

Esto es igual que instalemos los paquetes con comandos:

```
install.packages("janitor", dependencies = TRUE)
```

Después de instalados los paquetes o los palomeamos o los cargamos con un comando
```{r}
library(janitor)
```

Esto ya nos permite utilizarlos, es decir las funciones o comandos que vienen en ellos, ya pueden ser utilizados. Cargar los paquetes es una operación que se tiene que hacer en cada sesión (cuando abrimos) el programa R o RStudio. La instalación sólo se hace una vez. 

Veamos un par de paquetes más muy útiles.

## Paquete `{skimr}`

Vamos a instalar un paquete. Esto se puede hacer con menús

    install.packages("skimr")

Cargamos el paquete

```{r}
library(skimr)
```

```{r}
skimr::skim(endireh2021_CDMX)[,20]
```

## Paquete `{dplyr}`

    install.packages("dplyr")

Cargamos el paquete

```{r}
library(dplyr)
```

```{r}
dplyr::glimpse(endireh2021_CDMX)[,20]
```



## Paquete `{pacman}`

En general, cuando hacemos nuestro código querremos verificar que nuestras librerías estén instaladas. Si actualizamos nuestro R y Rstudio es probable que hayamos perdido alguno.

Este es un ejemplo de un código. Y vamos a introducir un paquete muy útil llamado `{pacman}`

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse, readxl, writexl, haven, sjlabelled, pollster) #carga los paquetes listados

```


## Pipes o tuberías

R utiliza dos pipes el nativo `|>` y el pipe que está en `{dplyr}` `%>%`.

<https://twitter.com/ArthurWelle/status/1535429654760284161>

Algunas de las diferencias las puedes checar acá <https://eliocamp.github.io/codigo-r/2021/05/r-pipa-nativa/>

En estas prácticas utilizaremos el segundo, pero son muy parecidos y para que esta instructora recicle algunos de sus códigos viejos. Pero funcionan igual:

```{r}
endireh2021_CDMX |> #pipe nativo, no necesita instalación
  select(starts_with("P7")) |>
  head()
```

```{r}
endireh2021_CDMX  %>%  #pipe de dplyr, necesita instalación de dplyr en tidyverse
  select(starts_with("P7")) %>% 
  head()
```
